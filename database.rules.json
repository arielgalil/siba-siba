{
  "rules": {
    // Admin list: Only readable by admins, not writable by clients
    "admins": {
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      ".write": false
    },
    // Game groups for SibaSiba: Readable by any user, writable only by admins
    "collections": {
      "groups": {
        ".read": "auth != null",
        ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
        // Optional validation for group structure
        "$groupId": {
           "difficulty": { ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 5" },
           "topic": { ".validate": "newData.isString() && newData.val().length > 0" },
           "sentences": {
              // *** CORRECTED VALIDATION for sentences node ***
              ".validate": "newData.exists() && newData.hasChildren()",
              "$sentenceId": {
                 // Validation for individual sentences (assuming keys might not be sequential numbers)
                 ".validate": "newData.hasChildren(['text', 'movable', 'id']) && newData.child('text').isString() && newData.child('text').val().length > 0 && newData.child('movable').isBoolean() && newData.child('id').isString()"
               }
            },
           "originalIndex": { ".validate": "newData.isNumber()" },
           // Disallow other properties unless explicitly defined
           "$other": { ".validate": false }
        }
      }
    },
    // Player data: Readable by self or admin, writable by self or admin
    "players": {
      ".read": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
      ".indexOn": ["createdAt", "nickname"], // Keep existing indexes
      "$playerId": {
        ".read": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
        ".write": "auth != null && (auth.uid === $playerId || (root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true))",
        // Validations for common/existing fields (Keep all original ones)
        "createdAt": {
          ".write": "!data.exists()",
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "nickname": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 25" },
        "darkMode": { ".validate": "newData.isBoolean()" },
        "lastTopic": { ".validate": "newData.isString()" },
        "cumulativeScore": { ".validate": "newData.isNumber()" }, // TrivBio score
        "correctCount": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "wrongCount": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "availableSkips": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "availableFiftyFifty": { ".validate": "newData.isNumber() && newData.val() >= 0" },
        "topicStats": {
          "$topic": { ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('correctCount').val() >= 0 && newData.child('wrongCount').isNumber() && newData.child('wrongCount').val() >= 0" }
        },
        "tagStats": {
          "$tag": { ".validate": "newData.hasChildren(['correctCount', 'wrongCount']) && newData.child('correctCount').isNumber() && newData.child('correctCount').val() >= 0 && newData.child('wrongCount').isNumber() && newData.child('wrongCount').val() >= 0" }
        },
        "adminDarkMode": { ".validate": "newData.isBoolean()" },

        // *** ADDED Validation for SibaSiba score ***
        "sibaSibaCumulativeScore": { ".validate": "newData.isNumber()" },

        // Handle unspecified properties under player ID - Using flexible option
         "$other": { ".validate": true }
      }
    },
     // *** ADDED Rules for Stats Node ***
     "stats": {
       "groupCountsByLevelTopic": {
         // Readable by any authenticated user (for GameSetup)
         ".read": "auth != null",
         // NOT writable by clients (only by Cloud Function using Admin SDK)
         ".write": false,
         // Validation for the structure
         "$level": {
           // Allow level keys 1 through 5 (as strings)
           ".validate": "$level === '1' || $level === '2' || $level === '3' || $level === '4' || $level === '5'",
           "$topic": {
              // Validate topic name is string (keys are always strings), and count is non-negative number
             ".validate": "newData.isNumber() && newData.val() >= 0"
           }
         }
       }
       // Add other stats here if needed
     },

     // --- Keeping original rules for other nodes (TrivBio?) ---
     "questions": {
       ".read": "auth != null",
       ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
       ".indexOn": ["createdAt", "topic"],
       "$questionId": {
         "question": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 1000" },
         "answers": {
           ".validate": "newData.hasChild('0') && newData.hasChild('1') && newData.child('0').isString() && newData.child('0').val().length > 0 && newData.child('1').isString() && newData.child('1').val().length > 0"
         },
         "correct": { ".validate": "newData.isNumber() && newData.val() >= 0" },
         "topic": { ".validate": "newData.isString() && (newData.val() == 'human-body' || newData.val() == 'cell' || newData.val() == 'ecology')" }, // Note: Limited topics here
         "tags": { ".validate": "newData.val() == null || newData.hasChildren()" },
         "createdAt": {
           ".write": "!data.exists()",
           ".validate": "newData.isNumber() && newData.val() <= now"
         },
         "updatedAt": {
           ".validate": "newData.isNumber() && newData.val() <= now"
         },
         "$other": { ".validate": false }
       }
     },
     "questionCounts": {
       ".read": "auth != null",
       ".write": false
     },
     "gameResults": {
       ".read": "auth != null",
       "$date": {
         "$playerId": {
           ".read": "auth != null",
           ".write": "auth != null && auth.uid === $playerId",
           // Very specific validation for TrivBio results format
           ".validate": "newData.hasChildren(['correctCount', 'totalQuestions', 'score', 'timestamp', 'topic', 'nickname', 'playerId']) && newData.child('playerId').val() === $playerId && newData.child('score').isNumber() && newData.child('correctCount').isNumber() && newData.child('correctCount').val() >= 0 && newData.child('totalQuestions').isNumber() && newData.child('totalQuestions').val() > 0 && newData.child('totalQuestions').val() >= newData.child('correctCount').val() && newData.child('timestamp').isString() && newData.child('topic').isString() && newData.child('nickname').isString() && newData.child('nickname').val().length > 0 && newData.child('nickname').val().length <= 25 && (newData.child('topic').val() === 'test_mode' || (newData.hasChild('longestStreak') && newData.child('longestStreak').isNumber() && newData.child('longestStreak').val() >= 0 && newData.hasChild('tools') && newData.child('tools').hasChildren(['fiftyFifty', 'addTime', 'skip']) && newData.child('tools/fiftyFifty').isNumber() && newData.child('tools/fiftyFifty').val() >= 0 && newData.child('tools/addTime').isBoolean() && newData.child('tools/skip').isNumber() && newData.child('tools/skip').val() >= 0))"
         }
       }
     },
     "leaderboard": {
       ".indexOn": ["cumulativeScore"],
       ".read": "auth != null",
       "$playerId": {
         ".write": "auth != null && root.child('admins').child(auth.uid).exists() && root.child('admins').child(auth.uid).val() === true",
         ".validate": "newData.hasChildren(['nickname', 'cumulativeScore']) && newData.child('nickname').isString() && newData.child('nickname').val().length > 0 && newData.child('nickname').val().length <= 25 && newData.child('cumulativeScore').isNumber()"
       }
     }
     // --- End of original rules ---
  }
}